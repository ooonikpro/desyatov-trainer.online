---
interface Props {
  label?: string;
  values?: string[];
}

const { label, values, ...attrs } = Astro.props;
---

<script>
  const gradient = (percentage: number) => {
    if (percentage <= 25) {
      return `linear-gradient(to right, red 0%, orange ${percentage}%, #000 ${percentage}%, #000 100%)`;
    }

    if (percentage <= 50) {
      return `linear-gradient(to right, red 0%, yellow ${percentage}%, #000 ${percentage}%, #000 100%)`;
    }

    if (percentage <= 75) {
      return `linear-gradient(to right, red 0%, yellow 50%, green ${percentage}%, #000 ${percentage}%, #000 100%)`;
    }

    return `linear-gradient(to right, red 0%, yellow 50%, green 75%, blue 100%)`;
  };

  const setBgColor = (input: Element) => () => {
    const max = Number(input.getAttribute("max"));
    const percentage = (Number(input.value) / max) * 100;

    input.style = `background: ${gradient(percentage)}`;
  };

  document.querySelectorAll(".range__input").forEach((input) => {
    setBgColor(input)();

    input.onchange = setBgColor(input);
  });
</script>

<label class="range">
  {label && <span class="range__label">{label}</span>}
  <input type="range" class="range__input" {...attrs} />

  {
    values && (
      <div class="range__description">
        {values.map((row) => (
          <span class="range__post-label">{row}</span>
        ))}
      </div>
    )
  }
</label>

<style lang="scss">
  @mixin sliderThumb {
    appearance: none;

    width: 34px;
    height: 34px;
    border-radius: 34px;
    border: 2px solid var(--black);
    cursor: grab;

    @include bgWithGradient;

    &:active {
      cursor: grabbing;
    }
  }

  .range {
    display: flex;
    flex-direction: column;
    gap: 16px;

    &__label {
      color: var(--white);
      font-size: 1rem;
      opacity: 0.7;
    }

    &__input {
      appearance: none;

      width: 100%;
      height: 16px;
      border-radius: 16px;

      background: transparent;
      outline: 2px solid var(--secondary);
      border: 2px solid var(--black);
      transition: filter 1s linear;
    }

    &:active &__input {
      filter: hue-rotate(360deg);
    }

    input[type="range"]::-webkit-slider-thumb {
      @include sliderThumb;
    }

    input[type="range"]::-moz-range-thumb {
      @include sliderThumb;
    }

    input[type="range"]::-ms-thumb {
      @include sliderThumb;
    }

    &__post-label {
      display: none;

      &.visible {
        display: block;
      }
    }
  }
</style>
